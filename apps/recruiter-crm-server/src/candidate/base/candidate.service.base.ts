/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Candidate as PrismaCandidate,
  Application as PrismaApplication,
} from "@prisma/client";

export class CandidateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CandidateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.candidate.count(args);
  }

  async candidates<T extends Prisma.CandidateFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateFindManyArgs>
  ): Promise<PrismaCandidate[]> {
    return this.prisma.candidate.findMany<Prisma.CandidateFindManyArgs>(args);
  }
  async candidate<T extends Prisma.CandidateFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateFindUniqueArgs>
  ): Promise<PrismaCandidate | null> {
    return this.prisma.candidate.findUnique(args);
  }
  async createCandidate<T extends Prisma.CandidateCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateCreateArgs>
  ): Promise<PrismaCandidate> {
    return this.prisma.candidate.create<T>(args);
  }
  async updateCandidate<T extends Prisma.CandidateUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateUpdateArgs>
  ): Promise<PrismaCandidate> {
    return this.prisma.candidate.update<T>(args);
  }
  async deleteCandidate<T extends Prisma.CandidateDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CandidateDeleteArgs>
  ): Promise<PrismaCandidate> {
    return this.prisma.candidate.delete(args);
  }

  async findApplications(
    parentId: string,
    args: Prisma.ApplicationFindManyArgs
  ): Promise<PrismaApplication[]> {
    return this.prisma.candidate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .applications(args);
  }

  async getApplication(parentId: string): Promise<PrismaApplication | null> {
    return this.prisma.candidate
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
